§ Многопоточное программирование
- использование потоков напрямую для использование всей производительности многоядерного процессора.
 Крайне сложно и неэффективно в руках неопытного программиста.

§ Асинхронное программирование
- использование методов асинхронного программирования предоставляемых языком программирования,
 фреймворками, библиотеками. В целом суть заключается в том, чтобы не используя потоки напрямую
 эффективный и понятный неблокирующий вызывающий поток код. Способы асинхронного программирования варьируются
 от языка к языку. Обычно под капотом реализуется с помощью пула потоков и очереди выполнения заданий. Задания 
 выполняются на потоке из пула, тем самым не блокируя вызывающий поток, который имеет возможность выполнять
 другие операции. В большинстве случаев асинхронное программирование используется для выполнения долгих 
 IO-задач, к примеру, чтение файла, общение с БД, запись и чтение из сети.

§ Параллельное программирование
- это частный случай многопоточного программирования: ситуация, в которой потоки выполняются одновременно на
 ядрах CPU является параллельным программированием. Условием данной ситуации является равное количество 
 одновременно запущенных потоков и ядер. Если на CPU 8 ядер, то необходимо запустить не более 8 потоков, чтоб
 они могли выполняться параллельно (многое зависит от ОС).  В основном используется для ускорения CPU-intensive
 задач, требующих больших вычислительных ресурсов. Путём распределения вычислений по ядрам процессора можно добиться
 прямопропорционального количеству ядер увеличения производительности. Количество потоков, большее чем кол-во
 ядер процессора не приведёт к приросту производительности в вычислительных операциях, наоборот - ухудшат. 
 Именно поэтому параллельное программирование используется в основном для вычислительных задач. Быстро перебрать
 элементы коллекции и обработать каждый элемент в ней типичный пример использование.